1,2c1
< #!/bin/bash
< 
---
> #!/usr/bin/env bash
6d4
< 
8a7
> ingressGateway=k8s-triliovault-ingress-gateway
21c20
<     kubectl krew upgrade tvk-preflight 2>> >(logit)
---
>     ret_val=$(kubectl krew upgrade tvk-preflight 2>&1)
24c23,30
<       echo "Failed to uggrade tvk-plugins/tvk-preflight plugin"
---
>       echo "$ret_val" | grep -q "can't upgrade, the newest version is already installed"
>       ret=$?
>       if [ "$ret" -ne 0 ]; then
>         echo "Failed to uggrade tvk-plugins/tvk-preflight plugin"
> 	return 1
>       else
> 	echo "tvk-preflight is already the newest version"
>       fi
81,82d86
< 
< 
117,118c121,122
<     read -r -p "Please provide the operator version to be installed (default - 2.1.0): " operator_version
<     read -r -p "Please provide the triliovault manager version (default - v2.1.1-alpha): " triliovault_manager_version
---
>     read -r -p "Please provide the operator version to be installed (default - 2.6.0): " operator_version
>     read -r -p "Please provide the triliovault manager version (default - 2.6.1): " triliovault_manager_version
126c130
<     operator_version='2.1.0'
---
>     operator_version='2.6.0'
129c133
<     triliovault_manager_version='v2.1.1-alpha'
---
>     triliovault_manager_version='2.6.1'
141c145
< 
---
>         return 1
206c210
<   
---
> 
210c214,215
<   if [[ $(kubectl get pods -l app=k8s-triliovault-control-plane -A 2>/dev/null) ]] && [[ $(kubectl get pods -l app=k8s-triliovault-admission-webhook -A 2>/dev/null) ]]; then
---
>   ret_code=$(kubectl get tvm -A 2>/dev/null)
>   if [[ ! -z "$ret_code" ]]; then
215c220
<     tvm_name=$(kubectl get tvm -A | awk '{print $1}' | sed -n 2p)
---
>     tvm_name=$(kubectl get tvm -A | awk '{print $2}' | sed -n 2p)
233c238
<       vercomp  "2.5" "$new_triliovault_manager_version"
---
>       vercomp "2.5" "$new_triliovault_manager_version"
236c241
<         svc_type=$(kubectl get svc k8s-triliovault-ingress-gateway -n "$get_ns" -o 'jsonpath={.spec.type}')
---
>         svc_type=$(kubectl get svc "$ingressGateway" -n "$get_ns" -o 'jsonpath={.spec.type}')
268c273
<     
---
> 
270c275
<     
---
> 
273c278,282
<   cat <<EOF | kubectl apply -f - 1>> >(logit) 2>> >(logit)
---
>   vercomp "2.6" "$new_triliovault_manager_version"
>   ret_val=$?
>   if [[ $ret_val == 2 ]] || [[ $ret_val == 1 ]] && [[ $tvm_upgrade != 1 ]]; then
> 
>     cat <<EOF | kubectl apply -f - 1>> >(logit) 2>> >(logit)
278c287
<     triliovault: triliovault
---
>     triliovault: k8s
283,284d291
<   helmVersion:
<     version: v3
285a293,307
>   # TVK components configuration, currently supports control-plane, web, exporter, web-backend, ingress-controller, admission-webhook.
>   # User can configure resources for all componentes and can configure service type and host for the ingress-controller
>   componentConfiguration:
>     web-backend:
>       resources:
>         requests:
>           memory: "400Mi"
>           cpu: "200m"
>         limits:
>           memory: "2584Mi"
>           cpu: "1000m"
>     ingress-controller:
>       service:
>         type: LoadBalancer
>       host: "${get_host}"
291a314,329
>   else
>     cat <<EOF | kubectl apply -f - 1>> >(logit) 2>> >(logit)
> apiVersion: triliovault.trilio.io/v1
> kind: TrilioVaultManager
> metadata:
>   labels:
>     triliovault: triliovault
>   name: ${tvm_name}
>   namespace: ${tvk_ns}
> spec:
>   trilioVaultAppVersion: ${triliovault_manager_version}
>   helmVersion:
>     version: v3
>   applicationScope: Cluster
> EOF
>   fi
318d355
< 
322,328c359,370
<   ret=$(kubectl get license -n "$tvk_ns" 2>> >(logit) | grep -q Active)
<   ret_code=$?
<   ret=$(kubectl get license -A 2>> >(logit) | grep -q Active)
<   ret_code_A=$?
<   if [ "$ret_code" -eq 0 ] || [ "$ret_code_A" -eq 0 ]; then
<     echo "License is already installed and is in active state"
<     return
---
>   flag=0
>   ret=$(kubectl get license -n "$tvk_ns" 2>> >(logit) | awk '{print $1}' | sed -n 2p)
>   if [[ ! -z "$ret" ]]; then
>     ret_val=$(kubectl get license "$ret" -n "$get_ns" 2>> >(logit) | grep -q Active)
>     ret_code_A=$?
>     if [ "$ret_code_A" -eq 0 ]; then
>       echo "License is already installed and is in active state"
>       return
>     fi
>     #license is installed but is in inactive state
>     echo "License is already installed and is in inactive state"
>     flag=1
329a372
> 
334a378,379
>     pip3 install yaml
> 
338c383
< #!/usr/bin/python3
---
> #!/usr/bin/env python3
342a388
> import yaml
355a402,409
> if($flag == 1):
>   with open('license_file1.yaml') as f:
>     doc = yaml.safe_load(f)
>   doc['metadata']['name'] = "$ret"
> 
>   with open('license_file1.yaml', 'w') as f:
>     yaml.dump(doc, f)
> 
358c412,413
<   sleep 5
---
>   cmd="kubectl get license -n $tvk_ns 2>> >(logit) | awk '{print $2}' | sed -n 2p | grep Active"
>   wait_install 5 "$cmd"
369d423
< 
393c447
<     echo "kubectl port-forward --address 0.0.0.0 svc/k8s-triliovault-ingress-gateway -n $get_ns 80:80 &"
---
>     echo "kubectl port-forward --address 0.0.0.0 svc/$ingressGateway -n $get_ns 80:80 &"
427c481
<   gateway=$(kubectl get pods --no-headers=true -n "$get_ns" 2>/dev/null | awk '/k8s-triliovault-ingress-gateway/{print $1}')
---
>   gateway=$(kubectl get pods --no-headers=true -n "$get_ns" 2>/dev/null | awk '/$ingressGateway/{print $1}')
429c483
<     echo "Not able to find k8s-triliovault-ingress-gateway resource,TVK UI configuration failed"
---
>     echo "Not able to find $ingressGateway resource,TVK UI configuration failed"
434c488
<   port=$(kubectl get svc k8s-triliovault-ingress-gateway -n "$get_ns" -o jsonpath='{.spec.ports[?(@.name=="http")].nodePort}' 2>> >(logit))
---
>   port=$(kubectl get svc "$ingressGateway" -n "$get_ns" -o jsonpath='{.spec.ports[?(@.name=="http")].nodePort}' 2>> >(logit))
439c493
<   if ! kubectl patch svc k8s-triliovault-ingress-gateway -n "$get_ns" -p '{"spec": {"type": "NodePort"}}' 1>> >(logit) 2>> >(logit); then
---
>   if ! kubectl patch svc "$ingressGateway" -n "$get_ns" -p '{"spec": {"type": "NodePort"}}' 1>> >(logit) 2>> >(logit); then
451a506
> #This function is used to configure TVK UI through Loadbalancer
485,487c540,583
<   if ! kubectl patch svc k8s-triliovault-ingress-gateway -n "$get_ns" -p '{"spec": {"type": "LoadBalancer"}}' 1>> >(logit) 2>> >(logit); then
<     echo "TVK UI configuration failed, please check ingress"
<     return 1
---
>   # Getting tvm version and setting the configs accordingly
>   tvm_name=$(kubectl get tvm -A | awk '{print $2}' | sed -n 2p)
>   tvk_ns=$(kubectl get tvm -A | awk '{print $1}' | sed -n 2p)
>   tvm_version=$(kubectl get TrilioVaultManager -n "$get_ns" -o json | grep releaseVersion | awk '{print$2}' | sed 's/[a-z-]//g' | sed -e 's/^"//' -e 's/"$//')
>   vercomp "2.6.0" "$tvm_version"
>   ret_val=$?
>   if [[ $ret_val == 2 ]] || [[ $ret_val == 1 ]]; then
>     retry=5
>     while [[ $retry -gt 0 ]]; do
>       cat <<EOF | kubectl apply -f - 1>> >(logit) 2>> >(logit)
> apiVersion: triliovault.trilio.io/v1
> kind: TrilioVaultManager
> metadata:
>   labels:
>     triliovault: k8s
>   name: $tvm_name
>   namespace: $tvk_ns
> spec:
>   applicationScope: Cluster
>   ingressConfig:
>     host: ${tvkhost_name}.${domain}
>   # TVK components configuration, currently supports control-plane, web, exporter, web-backend, ingress-controller, admission-webhook.
>   # User can configure resources for all componentes and can configure service type and host for the ingress-controller
>   componentConfiguration:
>     ingress-controller:
>       service:
>         type: LoadBalancer
> EOF
>       ret_code=$?
>       if [[ "$ret_code" -eq 0 ]]; then
>         break
>       else
>         retry="$((retry - 1))"
>       fi
>     done
>     if [[ "$ret_code" -ne 0 ]]; then
>       echo "Error while configuring TVM CRD.."
>       return 1
>     fi
>   else
>     if ! kubectl patch svc "$ingressGateway" -n "$get_ns" -p '{"spec": {"type": "LoadBalancer"}}' 1>> >(logit) 2>> >(logit); then
>       echo "TVK UI configuration failed, please check ingress"
>       return 1
>     fi
490c586
<   cmd="kubectl get svc k8s-triliovault-ingress-gateway -n $get_ns -o 'jsonpath={.status.loadBalancer}'"
---
>   cmd="kubectl get svc $ingressGateway -n $get_ns -o 'jsonpath={.status.loadBalancer}'"
492c588
<   val_status=$(kubectl get svc k8s-triliovault-ingress-gateway -n "$get_ns" -o 'jsonpath={.status.loadBalancer}')
---
>   val_status=$(kubectl get svc "$ingressGateway" -n "$get_ns" -o 'jsonpath={.status.loadBalancer}')
497,498c593,596
<   external_ip=$(kubectl get svc k8s-triliovault-ingress-gateway -n "$get_ns" -o 'jsonpath={.status.loadBalancer.ingress[0].ip}' 2>> >(logit))
<   kubectl patch ingress "$masterIngName" -n "$get_ns" -p '{"spec":{"rules":[{"host":"'"${tvkhost_name}.${domain}"'"}]}}' 1>> >(logit) 2>> >(logit)
---
>   external_ip=$(kubectl get svc "$ingressGateway" -n "$get_ns" -o 'jsonpath={.status.loadBalancer.ingress[0].ip}' 2>> >(logit))
>   if [[ $ret_val != 2 ]] && [[ $ret_val != 1 ]]; then
>     kubectl patch ingress k8s-triliovault-ingress-master -n "$get_ns" -p '{"spec":{"rules":[{"host":"'"${tvkhost_name}.${domain}"'"}]}}' 1>> >(logit) 2>> >(logit)
>   fi
705a804
>   region="$(cut -d '.' -f 1 <<<"$host_base")"
754a854,855
> }
> 
944d1044
< 
962c1062
<   #check if minio server already exists 
---
>   #check if minio server already exists
1003c1103
< 	if ! kubectl get deployment $rel_name -n $minio_server_namespace -o jsonpath="{.status.conditions[*].status}" | grep -q false; then
---
>         if ! kubectl get deployment $rel_name -n $minio_server_namespace -o jsonpath="{.status.conditions[*].status}" | grep -q false; then
1006,1008c1106,1108
< 	rel_name=""
< 	i=$((i+1))
<       done      
---
>         rel_name=""
>         i=$((i+1))
>       done
1027,1044d1126
<   #check if any process in running on port - 9000 on the machine
<   #proc_id=$(lsof -i :9000 | awk '{print $2}' | sed -n 2p)
<   #if [[ -z "$proc_id" ]]; then
<   #  kubectl port-forward $pod_name 9000 --namespace $minio_server_namespace --address 0.0.0.0 &
<   #  retcode=$?
<   #  if [ "$retcode" -ne 0 ]; then
<   #    echo "Not able to execute port forwarding for minio server on port 9000"
<   #    exit 1
<   #  fi
<   #else
<   #  cmd=$(ps -p $proc_id -o args | grep $pod_name)
<   #  if [[ -z "$cmd" ]]; then
<   #    echo "some other process is running on port 9000, not able to execute port forwarding"
<   #    exit 1
<   #  fi
<   #fi
<   #sleep 5
< 
1054c1136
<   ret_val=$(kubectl run $mc_pod_nm --image=minio/mc --restart=Never --command --  /bin/sh -c 'while true; do sleep 5s; done' 1>> >(logit) 2>> >(logit)) 
---
>   ret_val=$(kubectl run $mc_pod_nm --image=minio/mc --restart=Never --command --  /bin/sh -c 'while true; do sleep 5s; done' 1>> >(logit) 2>> >(logit))
1068d1149
<   #call_s3cfg_aws "$access_key" "$secret_key" "$host_base" "$host_bucket" "$bucket_location" "True"
1117a1199,1221
>     cat <<EOF | kubectl apply -f - 1>> >(logit) 2>> >(logit)
> apiVersion: triliovault.trilio.io/v1
> kind: Target
> metadata:
>   name: $target_name
>   namespace: $target_namespace
> spec:
>   type: ObjectStore
>   vendor: MinIO
>   objectStoreCredentials:
>     url: "$URL"
>     credentialSecret:
>       name: ${secret_name}
>       namespace: ${target_namespace}
>     bucketName: "$bucket_name"
>     region: "us-east1"
>   thresholdCapacity: 100Gi
> EOF
>   retcode=$?
>   if [ "$retcode" -ne 0 ]; then
>     echo "Target creation failed"
>     return 1
>   fi
1119,1124c1223,1227
<   #if [[ -n ${input_config} ]]; then   
<   #  sed -c -i "s/\($access_key *= *\).*/\1$ACCESS_KEY/" ${input_config}
<   #  sed -c -i "s/\($secret_key *= *\).*/\1$SECRET_KEY/" ${input_config}
<   #fi
< } 
< 
---
>   if [[ -n ${input_config} ]]; then
>     sed -c -i "s/\($access_key *= *\).*/\1$ACCESS_KEY/" ${input_config}
>     sed -c -i "s/\($secret_key *= *\).*/\1$SECRET_KEY/" ${input_config}
>   fi
> }
1135,1136c1238,1239
<                        northamerica-northeast1, northamerica-northeast2, southamerica-east1, 
<                        southamerica-west1, us-central1, us-east1, us-east4, us-west1, us-west2, 
---
>                        northamerica-northeast1, northamerica-northeast2, southamerica-east1,
>                        southamerica-west1, us-central1, us-east1, us-east4, us-west1, us-west2,
1138c1241
<                        europe-west1, europe-west2, europe-west3, europe-west4, europe-west6, 
---
>                        europe-west1, europe-west2, europe-west3, europe-west4, europe-west6,
1140c1243
<                        asia-northeast3, asia-south1, asia-south2, asia-southeast1, 
---
>                        asia-northeast3, asia-south1, asia-south2, asia-southeast1,
1248c1351
<       echo -e "Please select vendor\n1.Digital_Ocean\n2.Amazon_AWS\n3.Readymade_Minio\n4.GCP"
---
>       echo -e "Please select vendor\n1.Digital_Ocean\n2.Amazon_AWS"
1255,1258d1357
<       elif [[ $vendor_type == "Readymade_Minio" ]]; then
< 	vendor_type=3
<       elif [[ $vendor_type == "GCP" ]]; then
<         vendor_type=4
1269c1368
<       fi 
---
>       fi
1278,1291d1376
<     3)
<      create_readymade_minio
<      ret_code=$?
<      if [ "$ret_code" -ne 0 ]; then
<        return 1
<      fi
<      ;;
<     4)
<      create_gcp_s3
<      ret_code=$?
<      if [ "$ret_code" -ne 0 ]; then
<         return 1
<      fi
<      ;;
1318c1403
< 	return 0
---
>         return 0
1369d1453
< 
1406c1490
<     echo -e "Select an the backup way\n1.Label based(MySQL)\n2.Namespace based(Wordpress)\n3.Operator based(Mysql Operator)\n4.Helm based(Mongodb)\n5.Transformation Example(In progress)"
---
>     echo -e "Select an the backup way\n1.Label based(MySQL)\n2.Namespace based(Wordpress)\n3.Operator based(Mysql Operator)\n4.Helm based(Mongodb)"
1506c1590
<     while [[ $(python3 -c "import time;timeout = int(time.time());print(\"{0}\".format(timeout))") -le $endtime ]] && kubectl get pod -l  app.kubernetes.io/instance=my-wordpress -n $backup_namespace -o jsonpath="{.items[*].status.conditions[*].status}" | grep -q False; do
---
>     while [[ $(python3 -c "import time;timeout = int(time.time());print(\"{0}\".format(timeout))") -le $endtime ]] && kubectl get pod -l app.kubernetes.io/instance=my-wordpress -n $backup_namespace -o jsonpath="{.items[*].status.conditions[*].status}" | grep -q False; do
1511c1595
<     if kubectl get pod -l  app.kubernetes.io/instance=my-wordpress -n $backup_namespace -o  jsonpath="{.items[*].status.conditions[*].status}" | grep -q False;then
---
>     if kubectl get pod -l app.kubernetes.io/instance=my-wordpress -n $backup_namespace -o jsonpath="{.items[*].status.conditions[*].status}" | grep -q False; then
1529c1613
<       if echo "$errormessage"  | grep -Eq 'Error:|error:'; then
---
>       if echo "$errormessage" | grep -Eq 'Error:|error:'; then
1533c1617
<         echo "Installing MySQL Operator..."
---
>       echo "Installing MySQL Operator..."
1580,1587c1664,1671
<      yq eval -i 'del(.spec.backupPlanComponents)' backupplan.yaml
<      yq eval -i '.spec.backupPlanComponents.operators[0].operatorId="my-cluster"' backupplan.yaml
<      yq eval -i '.spec.backupPlanComponents.operators[0].customResources[0].groupVersionKind.group="mysql.presslabs.org" | .spec.backupPlanComponents.operators[0].customResources[0].groupVersionKind.group style="double"' backupplan.yaml
<      yq eval -i '.spec.backupPlanComponents.operators[0].customResources[0].groupVersionKind.version="v1alpha1" | .spec.backupPlanComponents.operators[0].customResources[0].groupVersionKind.version style="double"' backupplan.yaml
<      yq eval -i '.spec.backupPlanComponents.operators[0].customResources[0].groupVersionKind.kind="MysqlCluster" | .spec.backupPlanComponents.operators[0].customResources[0].groupVersionKind.kind style="double"' backupplan.yaml
<      yq eval -i '.spec.backupPlanComponents.operators[0].customResources[0].objects[0]="my-cluster"' backupplan.yaml
<      yq eval -i '.spec.backupPlanComponents.operators[0].operatorResourceSelector[0].matchLabels.name="mysql-operator"' backupplan.yaml
<      yq eval -i '.spec.backupPlanComponents.operators[0].applicationResourceSelector[0].matchLabels.app="mysql-operator"' backupplan.yaml
---
>       yq eval -i 'del(.spec.backupPlanComponents)' backupplan.yaml
>       yq eval -i '.spec.backupPlanComponents.operators[0].operatorId="my-cluster"' backupplan.yaml
>       yq eval -i '.spec.backupPlanComponents.operators[0].customResources[0].groupVersionKind.group="mysql.presslabs.org" | .spec.backupPlanComponents.operators[0].customResources[0].groupVersionKind.group style="double"' backupplan.yaml
>       yq eval -i '.spec.backupPlanComponents.operators[0].customResources[0].groupVersionKind.version="v1alpha1" | .spec.backupPlanComponents.operators[0].customResources[0].groupVersionKind.version style="double"' backupplan.yaml
>       yq eval -i '.spec.backupPlanComponents.operators[0].customResources[0].groupVersionKind.kind="MysqlCluster" | .spec.backupPlanComponents.operators[0].customResources[0].groupVersionKind.kind style="double"' backupplan.yaml
>       yq eval -i '.spec.backupPlanComponents.operators[0].customResources[0].objects[0]="my-cluster"' backupplan.yaml
>       yq eval -i '.spec.backupPlanComponents.operators[0].operatorResourceSelector[0].matchLabels.name="mysql-operator"' backupplan.yaml
>       yq eval -i '.spec.backupPlanComponents.operators[0].applicationResourceSelector[0].matchLabels.app="mysql-operator"' backupplan.yaml
1599,1601c1683,1685
<        helm repo add bitnami https://charts.bitnami.com/bitnami
<        helm repo update 1>> >(logit)
<        helm install mongotest bitnami/mongodb -n $backup_namespace
---
>         helm repo add bitnami https://charts.bitnami.com/bitnami
>         helm repo update 1>> >(logit)
>         helm install mongotest bitnami/mongodb -n $backup_namespace
1609c1693
<     while [[ $(python3 -c "import time;timeout = int(time.time());print(\"{0}\".format(timeout))") -le $endtime ]] && kubectl get pod -l app.kubernetes.io/name=mongodb -n $backup_namespace -o  jsonpath="{.items[*].status.conditions[*].status}" | grep -q -w False; do
---
>     while [[ $(python3 -c "import time;timeout = int(time.time());print(\"{0}\".format(timeout))") -le $endtime ]] && kubectl get pod -l app.kubernetes.io/name=mongodb -n $backup_namespace -o jsonpath="{.items[*].status.conditions[*].status}" | grep -q -w False; do
1764c1848
< 	return 1
---
>         return 1
1778,1780d1861
< 
< 
< 
1850a1932
>     # shellcheck disable=SC2086
1869c1951
<     
---
> 
